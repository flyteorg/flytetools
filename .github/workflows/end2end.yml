name: End to End tests

on:
  workflow_call:
    inputs:
      priorities:
        description: "Priorities of tests to register (comma-separated)"
        required: true
        type: string
jobs:
  endtoend:
    name: End to End tests
    runs-on: ubuntu-latest
    steps:
      - name: Set latest Flytesnacks release
        run: |
          FLYTESNACKS_VERSION="$(curl --silent https://api.github.com/repos/flyteorg/flytesnacks/releases/latest | jq -r .tag_name)"
          echo "FLYTESNACKS_VERSION=${FLYTESNACKS_VERSION}" >> ${GITHUB_ENV}
      - name: Checkout
        uses: actions/checkout@v3
      - uses: unionai/flytectl-setup-action@v0.0.1
        name: Setup flytectl
      - uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Setup Sandbox Cluster
        run: |
          mkdir -p ~/.flyte/sandbox
          cat << EOF > ~/.flyte/sandbox/config.yaml
          task_resources:
            defaults:
              cpu: "0"
              memory: "0"
            limits:
              cpu: "0"
              memory: "0"
          EOF
          flytectl demo start --source=$(pwd)
      - name: Setup Flytekit
        run: |
          python -m pip install --upgrade pip
          pip install flytekit
          pip freeze
      - name: Checkout flytesnacks
        uses: actions/checkout@v3
        with:
          repository: flyteorg/flytesnacks
          path: flytesnacks
          # TODO: Enable this once refactored version produces a release tag
          # ref: ${{ env.FLYTESNACKS_VERSION }}
      - name: Register specific tests
        run: |
          for f in basics/basics/basic_workflow.py \
                  basics/basics/hello_world.py \
                  basics/basics/lp.py \
                  basics/basics/named_outputs.py \
                  control_flow/control_flow/chain_entities.py \
                  control_flow/control_flow/dynamics.py \
                  control_flow/control_flow/map_task.py \
                  control_flow/control_flow/subworkflows.py \
                  type_system/type_system/custom_objects.py \
                  type_system/type_system/schema.py \
                  type_system/type_system/typed_schema.py ;
          do
              pyflyte --config ./boilerplate/flyte/end2end/functional-test-config.yaml \
                  register \
                  --project flytesnacks \
                  --domain development \
                  --image cr.flyte.org/flyteorg/flytekit:py3.11-latest \
                  --version ${{ env.FLYTESNACKS_VERSION }} \
                  flytesnacks/examples/$f;
          done
      - name: End2End
        run: |
          make end2end_execute
